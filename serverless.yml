service: dev-balance-ai-agent
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  architecture: arm64
  memorySize: 1024
  timeout: 180
  environment:
    S3_BUCKET_NAME: !Ref ChartsBucket
    GOOGLE_API_KEY: ${env:GOOGLE_API_KEY, ''}
    APP_REGION: ${self:provider.region}
    OPENAI_API_KEY: ${env:OPENAI_API_KEY, ''}
    OPENAI_MODEL: ${env:OPENAI_MODEL, 'gpt-5-nano'}
    USER_MEMORY_TABLE: ${env:USER_MEMORY_TABLE, 'dev-balance-ai-memory'}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Query
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.USER_MEMORY_TABLE}
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
      Resource:
        - "arn:aws:s3:::${self:custom.chartsBucketName}/*"
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"

functions:
  chat:
    name: dev-balance-ai-agent
    handler: src/handlers/chat.handler
    description: Balance AI Agent â€“ Lambda handler
    layers:
      - { Ref: FirestoreLambdaLayer }
    environment:
      NODE_OPTIONS: '--enable-source-maps'

layers:
  firestore:
    name: balance-ai-firestore 
    description: '@google-cloud/firestore and deps'
    compatibleRuntimes:
      - nodejs20.x
    compatibleArchitectures:
      - arm64
    package:
      artifact: layer/firestore-layer.zip

plugins:
  - serverless-esbuild
  - serverless-dotenv-plugin

package:
  individually: true
  patterns:
    - '!test/**'
    - '!tests/**'
    - '!coverage/**'
    - '!**/*.map'
    - '!.env'
    - '!node_modules/**'
    - 'balance-7e4cc-firebase-adminsdk-fbsvc-ee8fbfffbd.json'
    - '!layer/**'

custom:
  chartsBucketName: ${self:service}-charts-${self:provider.stage}
  esbuild:
    bundle: true
    minify: false
    platform: node
    target: node20
    format: cjs
    sourcemap: true
    sourcesContent: false
    keepNames: false
    # These deps live in the Layer, not in the bundle
    exclude:
      - '@google-cloud/firestore'
      - '@grpc/grpc-js'
      - 'google-gax'
      - 'google-auth-library'
      - 'protobufjs'

    external:
      - '@google-cloud/firestore'
      - '@grpc/grpc-js'
      - 'google-gax'
      - 'google-auth-library'
      - 'protobufjs'

resources:
  Resources:
    ChartsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.chartsBucketName}
        OwnershipControls:
          Rules:
            - ObjectOwnership: BucketOwnerEnforced
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
    ChartsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ChartsBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
              Resource:
                - Fn::Join: [ "", [ "arn:aws:s3:::", { "Ref": "ChartsBucket" }, "/*" ] ]
    ChatMemoryTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.USER_MEMORY_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
